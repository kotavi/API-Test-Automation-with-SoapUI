<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="1f135e9c-47e0-4382-b2cc-d001a467caea" activeEnvironment="Default" name="REST Mock Project 1" soapui-version="5.5.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="ee284f65-d7fc-4a56-9d9e-e7d429218558" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://locathost:8089" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://Tetianas-Air.attlocal.net:8089/</con:endpoint><con:endpoint>http://locathost:8089</con:endpoint></con:endpoints><con:resource name="Test" path="/test" id="f275022a-f1df-44ad-a69e-feeea8f31b81"><con:settings/><con:parameters><con:parameter><con:name>q</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Test 1" id="6993090a-ebd6-4a95-87e6-c4b7117852c9" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:test="http://locathost/test">test:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:test="http://locathost/test">test:Fault</con:element></con:representation><con:request name="Request 1" id="bbce9fff-6546-4844-a5ae-9f19032ebe0f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8089</con:endpoint><con:request/><con:originalUri>http://locathost/test</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="q" value="IPVPN" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>q</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="f8a2790b-0421-4fc7-843f-6d820379bd81" port="8089" path="/" host="Tetianas-Air.attlocal.net" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:restMockAction name="/test" method="GET" resourcePath="/test" id="b7da7e7d-d7d1-4655-848a-c64c98703cae"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("IPVPN") )
{
    // return the name of the response you want to dispatch
    return "Response 1"
}
else if( queryString.contains("LINK") )
{
    // return the name of the response you want to dispatch
    return "Response 2"
}



/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="5d4c4bf3-0e8a-4962-97bf-307c2dd4fea8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "uuid" : "0d7b3a49-63fe-4abc-a42c-0d2c208edb58",
  "customer_uuid" : "cf616c59-0855-484e-84f8-a5e48247acf3",
  "external_service_id" : "N3612162R",
  "status" : "ACTIVE",
  "created_at" : 1552611845620,
  "updated_at" : 1552611845620,
  "service_uuid" : "2ac1ddaa-ff21-11e6-be1f-000c293805b1"
}</con:responseContent></con:response><con:response name="Response 2" id="d6ad792c-0166-4360-b95a-f079755e40ba" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>{
  "error-auxiliary-message" : "Error",
  "error-code" : 1080015,
  "error-message" : "Link Id does not exist"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>